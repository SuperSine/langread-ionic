type Query {
  token: Token
  auth: Auth
}

type Token {
  get(appId: String, appSecret: String): String
}

type Auth {
  profile(appId: String!, appSecret: String!): ProfileType
  auth(email: String!, password: String!): UserType
  email(email: String!): Boolean
  username(username: String!): Boolean
  sendverify(appId: String, appSecret: String): Boolean
  sendreset(appId: String, appSecret: String): Boolean
  sendauthcode(email: String!): Boolean
}

type ProfileType {
  firstName: String
  lastName: String
  email: String!
  phoneNumber: String
  userName: String!
  emailConfirmed: Boolean!
  displayLanguage: String
  targetLanguage: String
  sourceLanguage: String
}

type UserType {
  firstName: String
  lastName: String
  appId: String!
  appSecret: String!
  email: String!
  phoneNumber: String
  userName: String!
  emailConfirmed: Boolean!
  displayLanguage: String!
  targetLanguage: String!
  sourceLanguage: String!
  token: String
}

type Mutation {
  secret: Secret
  user: User
}

type Secret {
  update(email: String!, password: String!): UserType
}

type User {
  register(
    email: String!
    phonenumber: String
    password: String
    username: String
    firstname: String
    lastname: String
    displayLanguage: String
    sourceLanguage: String
    targetLanguage: String
  ): UserType
  update(
    appId: String
    appSecret: String
    user: UpdateUserViewModelType
  ): UserType
  email(appId: String, appSecret: String, email: String): UserType
  password(
    appId: String
    appSecret: String
    token: String
    password: String
  ): Boolean
  verify(email: String!, code: String!, purpose: TokenPurpose): UserType
}

input UpdateUserViewModelType {
  userName: String
  firstName: String
  lastName: String
  phoneNumber: String
  displayLanguage: String
  targetLanguage: String
  sourceLanguage: String
}

enum TokenPurpose {
  EMAIL
  PHONE_NUMBER
  USER_LOGIN
}
