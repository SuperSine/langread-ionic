# The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

# The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

# The `DateTimeOffset` scalar type represents a date, time and offset from UTC. `DateTimeOffset` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTimeOffset

# The `Seconds` scalar type represents a period of time represented as the total number of seconds.
scalar Seconds

# The `Milliseconds` scalar type represents a period of time represented as the total number of milliseconds.
scalar Milliseconds

scalar Decimal

scalar Uri

scalar Guid

scalar Short

scalar UShort

scalar UInt

scalar Long

scalar BigInt

scalar ULong

scalar Byte

scalar SByte

type Query {
  document: DocumentQueryType
  tag: TagQuery
  timeline: Timeline
  wti: WordTagInfo
}

type DocumentQueryType {
  get(
    docId: String = null
    includeWti: Boolean = true
  ): WordTagDocumentCleanType
  giveItToMe(
    content: String = null
    wordTagLiteStr: String = null
  ): WordTagDocumentCleanType
  infoDocuments(
    word: String = null
    lastId: String = null
    limit: String = "10"
  ): InfoDocumentsCleanType
  list(
    lastId: String = null
    limit: String = null
    keywords: String = null
  ): [DocumentType]
  search(
    keywords: String = null
    lastId: String = null
    limit: Int = 10
  ): [DocumentType]
  stats: WordTagStaticsType
}

type InfoDocumentsCleanType {
  documents: [DocumentType]
  wordTagInfo: WordTagInfoCleanType
}

type WordTagInfoCleanType {
  createDate: Date!
  tags: [TagType]
  updateDate: Date!
  wti: [WordInfoCleanType]
}

type WordInfoCleanType {
  word: String!
  wordInfos: [InfoCleanType]
}

type InfoCleanType {
  count: Int!
  tag: TagType
}

type TagType {
  # create date of tag
  createDate: Date!

  # the unique id of tag
  id: String!

  # color of tag
  tagColor: String!

  # font of tag
  tagFont: String!

  # name of tag
  tagName: String!
}

type DocumentType {
  content: String!
  createDate: DateTime
  docId: String!
  forkId: String
  groupId: String
  id: String!
  language: String
  status: Int!
  title: String!
  updateDate: DateTime
  url: String
  wordsCount: Int!
}

type WordTagDocumentCleanType {
  bigWordTagInfo: WordTagInfoCleanType
  createTime: DateTime
  document: DocumentType
  isCreator: Boolean!
  smallWordTagInfo: WordTagInfoCleanType
  status: Int!
  updateTime: DateTime
  userId: String!
}

type WordTagStaticsType {
  documentCount: Long!
  tagCount: Int!
  tagWordCount: Int!
}

type TagQuery {
  all: [TagType]
}

type WordTagInfo {
  dict(word: String = null, lang: String = "en-us"): SearchResultType
  get: WordTagInfoCleanType
  profile(
    word: String = null
    fromLang: String = null
    toLang: String = null
  ): WordProfileType
  topMost(top: String = "500", userId: String): [WordProfileType]
}

type SearchResultType {
  results: [DictResultType]
}

type DictResultType {
  id: String!
  language: String!
  lexicalEntries: [LexicalEntryType]
  type: String!
  word: String!
}

type LexicalEntryType {
  entries: [EntryType]
  language: String!
  lexicalCategory: String!
  pronunciations: [PronunciationType]
  text: String!
}

type EntryType {
  homographNumber: String!
  senses: [SenseType]
}

type SenseType {
  definitions: [String]!
  domains: [String]!
  examples: [String]!
}

type PronunciationType {
  audioFile: String
  dialects: [String]
  phoneticNotation: String
  phoneticSpelling: String
}

type WordProfileType {
  dictResult: SearchResultType
  entryResults: [EntryResultType]
  score: Float!
  translationResult: TranslationResultType
  word: String!
  wordInfo: [InfoCleanType]
}

type EntryResultType {
  meanings: [MeaningType]
  origin: String
  phonetic: String
  word: String!
}

type MeaningType {
  definitions: [DefinitionType]
  partOfSpeech: String!
}

type DefinitionType {
  description: String!
  example: String
  synonyms: [String]
}

type TranslationResultType {
  displaySource: String!
  normalizedSource: String!
  translations: [TranslationType]
}

type TranslationType {
  backTranslations: [BackTranslationType]
  confidence: Float!
  displayTarget: String!
  normalizedTarget: String!
  posTag: String!
  prefixWord: String!
}

type BackTranslationType {
  displayTarget: String!
  frequencyCount: Int!
  normalizedText: String!
  numExamples: Int!
}

type Timeline {
  get(
    lastId: String = null
    limitDocs: String = "10"
    index: String = "1"
    size: String = "20"
    keywords: String = null
  ): TimelineItemsType
  search(keyword: String = null): [String]
  tagByMonth(tagName: String = null): TimelineValueByMonthType
  wordByMonth(word: String = null): TimelineValueByMonthType
}

type TimelineItemsType {
  count: Int!
  lastId: String!
  nextId: String
  pageIndex: Int!
  pageSize: Int!
  words: [[String]]
  wordTagInfo: WordTagInfoCleanType
}

type TimelineValueByMonthType {
  count: Int!
  data: [ValueByMonthType]
  pageIndex: Int!
  pageSize: Int!
}

type ValueByMonthType {
  total: Int!
  yearMonth: YearMonthType
}

type YearMonthType {
  month: Int!
  year: Int!
}

type Mutation {
  doc: Doc
  tag: TagMutation
  wti: WordTagInfoMutation
}

type TagMutation {
  add(tag: TagInput!): TagType
  delete(tagName: String!): Int
  update(tagName: String!, tag: TagInput!): Int
}

input TagInput {
  tagName: String!
  tagFont: String!
  tagColor: String!
}

type Doc {
  add(
    document: DocumentInputType!
    wordTagLiteStr: String = null
  ): WordTagDocumentCleanType
  delete(docId: String = null): Int
  deleteAllData: Int
  fork(
    docId: String!
    groupId: String = null
    wordTagLiteStr: String = null
  ): WordTagDocumentCleanType
  save(
    document: DocumentInputType!
    wordTagLiteStr: String = null
  ): WordTagDocumentCleanType
  update(
    docId: String = null
    document: DocumentInputType!
    wordTagLiteStr: String = null
  ): WordTagDocumentCleanType
}

input DocumentInputType {
  title: String!
  content: String!
  id: String = null
  docId: String = null
  url: String = null
  groupId: String = null
}

type WordTagInfoMutation {
  remove(word: String!, tagName: String!): Boolean
}
