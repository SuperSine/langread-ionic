type Query {
  document: DocumentQueryType
  tag: TagQuery
  wti: WordTagInfo
  timeline: Timeline
}

type DocumentQueryType {
  infoDocuments(
    word: String
    lastId: String
    limit: Int = 10
  ): InfoDocumentsCleanType
  giveItToMe(content: String, wordTagLiteStr: String): WordTagDocumentCleanType
  get(docId: String, includeWti: Boolean = true): WordTagDocumentCleanType
  list(lastId: String, limit: Int, keywords: String): [DocumentType]
  search(keywords: String, lastId: String, limit: Int = 10): [DocumentType]
  stats: WordTagStaticsType
}

type InfoDocumentsCleanType {
  wordTagInfo: WordTagInfoCleanType
  documents: [DocumentType]
}

type WordTagInfoCleanType {
  wti: [WordInfoCleanType]
  tags: [TagType]
  createDate: DateTime!
  updateDate: DateTime!
}

type WordInfoCleanType {
  word: String!
  wordInfos: [InfoCleanType]
}

type InfoCleanType {
  tag: TagType
  count: Int!
}

type TagType {
  # the unique id of tag
  id: String!

  # name of tag
  tagName: String!

  # color of tag
  tagColor: String!

  # font of tag
  tagFont: String!

  # create date of tag
  createDate: DateTime!
}

# The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

type DocumentType {
  id: String!
  docId: String!
  title: String!
  status: Int!
  content: String!
  createDate: DateTime
  updateDate: DateTime
  wordsCount: Int!
  url: String
  groupId: String
  forkId: String
  language: String
}

type WordTagDocumentCleanType {
  smallWordTagInfo: WordTagInfoCleanType
  bigWordTagInfo: WordTagInfoCleanType
  document: DocumentType
  createTime: DateTime
  updateTime: DateTime
  status: Int!
  userId: String!
  isCreator: Boolean!
}

type WordTagStaticsType {
  documentCount: Long!
  tagWordCount: Int!
  tagCount: Int!
}

scalar Long

type TagQuery {
  all: [TagType]
}

type WordTagInfo {
  get: WordTagInfoCleanType
  dict(word: String, lang: String = "en-us"): SearchResultType
  profile(word: String, fromLang: String, toLang: String): WordProfileType
  topMost(top: Int = 500, userId: String = ""): [WordProfileType]
}

type SearchResultType {
  results: [DictResultType]
}

type DictResultType {
  id: String!
  language: String!
  type: String!
  word: String!
  lexicalEntries: [LexicalEntryType]
}

type LexicalEntryType {
  entries: [EntryType]
  language: String!
  lexicalCategory: String!
  text: String!
  pronunciations: [PronunciationType]
}

type EntryType {
  homographNumber: String!
  senses: [SenseType]
}

type SenseType {
  definitions: [String]!
  domains: [String]!
  examples: [String]!
}

type PronunciationType {
  audioFile: String
  dialects: [String]
  phoneticNotation: String
  phoneticSpelling: String
}

type WordProfileType {
  word: String!
  score: Float!
  dictResult: SearchResultType
  entryResults: [EntryResultType]
  wordInfo: [InfoCleanType]
  translationResult: TranslationResultType
}

type EntryResultType {
  word: String!
  phonetic: String
  origin: String
  meanings: [MeaningType]
}

type MeaningType {
  partOfSpeech: String!
  definitions: [DefinitionType]
}

type DefinitionType {
  description: String!
  example: String
  synonyms: [String]
}

type TranslationResultType {
  normalizedSource: String!
  displaySource: String!
  translations: [TranslationType]
}

type TranslationType {
  normalizedTarget: String!
  displayTarget: String!
  posTag: String!
  confidence: Float!
  prefixWord: String!
  backTranslations: [BackTranslationType]
}

type BackTranslationType {
  normalizedText: String!
  displayTarget: String!
  numExamples: Int!
  frequencyCount: Int!
}

type Timeline {
  get(
    lastId: String
    limitDocs: Int = 10
    index: Int = 1
    size: Int = 20
    keywords: String
  ): TimelineItemsType
  search(keyword: String): [String]
  wordByMonth(word: String): TimelineValueByMonthType
  tagByMonth(tagName: String): TimelineValueByMonthType
}

type TimelineItemsType {
  lastId: String!
  nextId: String
  pageIndex: Int!
  pageSize: Int!
  count: Int!
  words: [[String]]
  wordTagInfo: WordTagInfoCleanType
}

type TimelineValueByMonthType {
  count: Int!
  pageIndex: Int!
  pageSize: Int!
  data: [ValueByMonthType]
}

type ValueByMonthType {
  yearMonth: YearMonthType
  total: Int!
}

type YearMonthType {
  year: Int!
  month: Int!
}

type Mutation {
  tag: TagMutation
  doc: Doc
  wti: WordTagInfoMutation
}

type TagMutation {
  add(tag: TagInput!): TagType
  delete(tagName: String!): Int
  update(tagName: String!, tag: TagInput!): Int
}

input TagInput {
  tagName: String!
  tagFont: String!
  tagColor: String!
}

type Doc {
  save(
    document: DocumentInputType!
    wordTagLiteStr: String
  ): WordTagDocumentCleanType
  add(
    document: DocumentInputType!
    wordTagLiteStr: String
  ): WordTagDocumentCleanType
  fork(
    docId: String!
    groupId: String
    wordTagLiteStr: String
  ): WordTagDocumentCleanType
  delete(docId: String): Int
  update(
    docId: String
    document: DocumentInputType!
    wordTagLiteStr: String
  ): WordTagDocumentCleanType
  deleteAllData: Int
}

input DocumentInputType {
  title: String!
  content: String!
  id: String
  docId: String
  url: String
  groupId: String
}

type WordTagInfoMutation {
  remove(word: String!, tagName: String!): Boolean
}
