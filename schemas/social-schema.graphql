type Query {
  moment: MomentQuery
  group: GroupQuery
  profile: ProfileQuery
}

type MomentQuery {
  listByGroup(
    id: String
    type: MomentGroupType
    pageIndex: Int
    pageSize: Int
  ): [MomentType]
  listByFollowing(pageIndex: Int, pageSize: Int, id: String): [MomentType]
  listByLang(pageIndex: Int, pageSize: Int, langCode: String): [MomentType]
  listByComment(id: String, pageIndex: Int, pageSize: Int): [CommentType]
  getByDocId(id: String): MomentType
}

type MomentType {
  id: String!
  parent: String
  root: String
  title: String
  content: String!
  creator: String!
  upvoteCount: Int
  forkCount: Int
  language: String
  groupId: String
  status: Int!
  createTime: DateTime
  momentGroupTypeId: Int
  userName: String
  readId: String
  commentCount: Int
}

# The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

enum MomentGroupType {
  ALL
  PROFILE
  GROUP
  PAGE
  COMMENT
}

type CommentType {
  id: String!
  parent: String
  root: String
  content: String!
  creator: String!
  upvoteCount: Int
  status: Int!
  createTime: DateTime
  userName: String
  createdByCurrentUser: Boolean!
  hasVoted: Boolean!
}

type GroupQuery {
  detail(id: String): GroupType
  userGroupList(
    keywords: String
    pageIndex: Int
    pageSize: Int
    userId: String
    includeDefault: Boolean
  ): [GroupType]
  allGroupList(keywords: String, pageIndex: Int, pageSize: Int): [GroupType]
  top(top: Int, userId: String): [GroupType]
  topByFollowers(top: Int): [GroupType]
  checkAvailable(name: String): Boolean
  followers(groupId: String, index: Int, size: Int): [UserViewType]
}

type GroupType {
  id: String!
  name: String!
  photoUrl: String
  groupTypeId: Int
  description: String
  languages: String
  creator: String
  lastUpdatedBy: String
  memberCount: Int
  readCount: Int
  createTime: DateTime
  updateTime: DateTime
  isAdmin: Boolean
  isFollowed: Boolean
  creatorUserName: String
  isDefault: Boolean
}

type UserViewType {
  id: String!
  name: String!
  photoUrl: String!
  isFollowing: Boolean!
  isFollower: Boolean!
  followerCount: Int!
  followingCount: Int!
  description: String
}

type ProfileQuery {
  profile(userId: String): UserViewType
  followers(pageIndex: Int, pageSize: Int, userId: String): [UserViewType]
  followings(pageIndex: Int, pageSize: Int, userId: String): [UserViewType]
  people(pageIndex: Int, pageSize: Int): [UserViewType]
  friends(pageIndex: Int, pageSize: Int, userId: String): [UserViewType]
}

type Mutation {
  moment: MomentMutation
  group: GroupMutation
  profile: ProfileMutation
}

type MomentMutation {
  delete(id: String): MomentType
  post(data: MomentInputType!): MomentType
  comment(data: CommentInputType!): CommentType
  vote(id: String, value: Int): MomentType
}

input MomentInputType {
  parent: String
  root: String
  title: String
  content: String!
  language: String
  groupId: String
  momentGroupTypeId: Int
}

input CommentInputType {
  content: String!
  parent: String
  readId: String!
}

type GroupMutation {
  unfollow(groupId: String, followerId: String): Int
  follow(groupId: String): Int
  create(data: GroupInputType): GroupType
  update(data: GroupInputType!): GroupType
  delete(id: String): Int
}

input GroupInputType {
  id: String
  name: String
  photoUrl: String
  groupTypeId: Int
  description: String
  languages: String
}

type ProfileMutation {
  follow(profileId: String): Int
  unfollow(followerUserId: String): Int
  deleteAllData: Int
}
