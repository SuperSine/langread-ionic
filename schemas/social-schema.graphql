# The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

# The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

# The `DateTimeOffset` scalar type represents a date, time and offset from UTC. `DateTimeOffset` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTimeOffset

# The `Seconds` scalar type represents a period of time represented as the total number of seconds.
scalar Seconds

# The `Milliseconds` scalar type represents a period of time represented as the total number of milliseconds.
scalar Milliseconds

scalar Decimal

scalar Uri

scalar Guid

scalar Short

scalar UShort

scalar UInt

scalar Long

scalar BigInt

scalar ULong

scalar Byte

scalar SByte

type Query {
  group: GroupQuery
  moment: MomentQuery
  profile: ProfileQuery
}

type MomentQuery {
  getByDocId(id: String = null): MomentType
  listByComment(
    id: String = null
    pageIndex: String = null
    pageSize: String = null
  ): [CommentType]
  listByFollowing(
    pageIndex: String = null
    pageSize: String = null
    id: String = null
  ): [MomentType]
  listByGroup(
    id: String = null
    type: MomentGroupType = null
    pageIndex: String = null
    pageSize: String = null
  ): [MomentType]
  listByLang(
    pageIndex: String = null
    pageSize: String = null
    langCode: String = null
  ): [MomentType]
}

type MomentType {
  commentCount: Int
  content: String!
  createTime: DateTime
  creator: String!
  forkCount: Int
  groupId: String
  id: String!
  language: String
  momentGroupTypeId: Int
  parent: String
  readId: String
  root: String
  status: Int!
  title: String
  upvoteCount: Int
  userName: String
}

enum MomentGroupType {
  ALL
  PROFILE
  GROUP
  PAGE
  COMMENT
}

type CommentType {
  content: String!
  createdByCurrentUser: Boolean!
  createTime: DateTime
  creator: String!
  hasVoted: Boolean!
  id: String!
  parent: String
  root: String
  status: Int!
  upvoteCount: Int
  userName: String
}

type GroupQuery {
  allGroupList(
    keywords: String = null
    pageIndex: String = null
    pageSize: String = null
  ): [GroupType]
  checkAvailable(name: String = null): Boolean
  detail(id: String = null): GroupType
  followers(
    groupId: String = null
    index: String = null
    size: String = null
  ): [UserViewType]
  top(top: Int = null, userId: String = null): [GroupType]
  topByFollowers(top: Int = null): [GroupType]
  userGroupList(
    keywords: String = null
    pageIndex: String = null
    pageSize: String = null
    userId: String = null
    includeDefault: String = null
  ): [GroupType]
}

type GroupType {
  createTime: Date
  creator: String
  creatorUserName: String
  description: String
  groupTypeId: Int
  id: String!
  isAdmin: Boolean
  isDefault: Boolean
  isFollowed: Boolean
  languages: String
  lastUpdatedBy: String
  memberCount: Int
  name: String!
  photoUrl: String
  readCount: Int
  updateTime: Date
}

type UserViewType {
  description: String
  followerCount: Int!
  followingCount: Int!
  id: String!
  isFollower: Boolean!
  isFollowing: Boolean!
  name: String!
  photoUrl: String!
}

type ProfileQuery {
  followers(
    pageIndex: String = null
    pageSize: String = null
    userId: String = null
  ): [UserViewType]
  followings(
    pageIndex: String = null
    pageSize: String = null
    userId: String = null
  ): [UserViewType]
  friends(
    pageIndex: String = null
    pageSize: String = null
    userId: String = null
  ): [UserViewType]
  people(pageIndex: String = null, pageSize: String = null): [UserViewType]
  profile(userId: String = null): UserViewType
}

type Mutation {
  group: GroupMutation
  moment: MomentMutation
  profile: ProfileMutation
}

type MomentMutation {
  comment(data: CommentInputType!): CommentType
  delete(id: String = null): MomentType
  post(data: MomentInputType!): MomentType
  vote(id: String = null, value: String = null): MomentType
}

input MomentInputType {
  parent: String = null
  root: String = null
  title: String = null
  content: String!
  language: String = null
  groupId: String = null
  momentGroupTypeId: Int = null
}

input CommentInputType {
  content: String!
  parent: String = null
  readId: String!
}

type GroupMutation {
  create(data: GroupInputType = null): GroupType
  delete(id: String = null): Int
  follow(groupId: String = null): Int
  unfollow(groupId: String = null, followerId: String = null): Int
  update(data: GroupInputType!): GroupType
}

input GroupInputType {
  id: String = null
  name: String = null
  photoUrl: String = null
  groupTypeId: Int = null
  description: String = null
  languages: String = null
}

type ProfileMutation {
  deleteAllData: Int
  follow(profileId: String = null): Int
  unfollow(followerUserId: String = null): Int
}
